name: Deployment
on: 
  push:
  
  workflow_dispatch:
    inputs:
      release:
        description: "ENTER Release version that you want to deploy"
        required: true
      environment:
        type: choice
        description: "ENTER environment name (dev,staging,production) in which you want to deploy"
        options:
          - dev
          - staging
          - production
        required: true
        default: 'no'
env:
  functions: "['export_apis/export_query','export_apis/data_transfer','export_apis/data_sync_status_updator']"
  FUNCTION_MAPPING: '{"export_apis/export_query" : "marketscan-ccf-test-export-query" ,"export_apis/data_transfer": "marketscan-ccf-test-data-transfer","export_apis/data_sync_status_updator": "marketscan-ccf-test-data-sync-status-updator", "export_apis/bigquery_setup": "marketscan-ccf-test-bigquery-setup" , "data_ingestion_apis/dataset_setup": "marketscan-ccf-test-dataset-setup" , "data_ingestion_apis/dataset_import": "marketscan-ccf-test-dataset-import" ,"data_ingestion_apis/rawdata_transfer": "marketscan-ccf-test-rawdata-transfer" , "data_ingestion_apis/rawdata_sync_status_updator": "marketscan-ccf-test-rawdata-sync-status-updator" , "data_ingestion_apis/rawdata_etl_notifier": "marketscan-ccf-test-rawdata-etl-notifier" , "data_ingestion_apis/create_schema": "marketscan-ccf-test-create-schema" , "utility_apis/job_management": "marketscan-ccf-test-job-management" , "utility_apis/audit_logging": "marketscan-ccf-test-audit-logging"}'
jobs:

  parse_json:
    name: parsing of json
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.step1.outputs.test_key }}
      output2: ${{ steps.step2.outputs.test_value }}
    steps:
    steps:
      - id: step
        run: sudo apt install jq -y
      - id: step1
        run: |
          chmod +x function_key.sh
          keys=`./function_key.sh`
          echo "::set-output name=test_key::$keys"
      - id: step2
        run: |
          chmod +x function_value.sh
          values=`./function_value.sh`
          echo "::set-output name=test_value::$values"


  test_build:
    name: Test Lambda function
    runs-on: ubuntu-latest
    needs: parse_json
    strategy:
      matrix:
        functions: ${{needs.parse_json.outputs.output1}}
    steps:
      - name: Display matrix
        run: |
          echo "${{matrix.functions}}"

  test_build_2:
    name: Test Lambda function 2
    runs-on: ubuntu-latest
    needs: parse_json
    strategy:
      matrix:
        functions: ${{needs.parse_json.outputs.output2}}
    steps:
      - name: Display matrix
        run: |
          echo "${{matrix.functions}}"

  # deploy:
  #   name: Deploy lambda
  #   # needs: [test_build]
  #   # if: github.event_name == 'workflow_dispatch'
  #   # environment: github.event.inputs.environment
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check if tag exists
  #       run: |
  #         echo "into the functions..."
  #         echo "${{fromJson(env.FUNCTION_MAPPING)}}"

      # - name: checkout source code
      #   uses: actions/checkout@v3
      #   with:
      #     ref: ${{ github.event.inputs.release}}
      #     fetch-depth: 0
      
      # - name: print tag version
      #   run: |
      #     cd test-lambdas
      #     python3 print_release_id.py refs/tags/${{ github.event.inputs.release_id}}